page.title=Render Filters
page.description=Any widget can be configured with 'renderFilter' configuration. This allows Aikau to determine whether or not the widget should be rendered based on the value of its 'currentItem' or some other property. It is possible to create complex filter rules using AND and OR logic. Some good examples of this can be found in the modules in the 'alfresco/renderers/actions' package. This page shows some different examples of filters that can be configured.

example1.title=Value
example1.description=In this example the 'currentItem' attribute (hard-coded here, but typically would be provided by some loaded data) of the VerticalWidgets is inspected to determine whether or not to render the Logo (remember it is the parent that is deciding whether to render its children - the 'currentItem' of the Logo is not being inspected). In this example the Logo is rendered because the value of 'x' is included in the 'values' array. Try changing the 'values' attribute or the value of 'x' to stop the Logo from being rendered.

example2.title=Contains
example2.description=In this example 'x' has been changed to be an array. It is possible to check for values in an array by switching 'values' to be 'contains'. Only one value needs to be matched in order for the filter to pass.

example3.title=Contains All
example3.description=In this example we are still checking against an array, but this time we are using 'containsAll' to ensure that both 'a' AND 'c' are included in the array. Note that there are additional elements in 'x' - we are not trying to test equality of arrays, only to test the existance of a subset of elements.

example4.title=Token substitution
example4.description=In this example we are enabling token substitution by configuring 'substituteTokens' to be true. This allows us to convert use the value of an 'currentItem' property to test against a different property. Notice that dot-notation is allowed here. 

example5.title=Negation
example5.description=This example is exactly the same as the last apart from the use of the 'negate' attribute. This reverses the filter so whereas the filter in previous example passes and the the Logo is displayed, this filter will fail and the Logo is not displayed. The 'negate' attribute can be applied to any filter configuration.

example6.title=Render When Absent
example6.description=It is possible to allow filters to pass if the property being targeted does not exist. This makes it possible to only test properties when they are present. In this example we are setting the 'renderOnAbsentProperty' and testing for a property that does not exist in 'currentItem'. The Logo is still rendered because of this additional attribute that we have set. Try removing the 'renderOnAbsentProperty' or configuring it to be false to prevent the Logo from rendering.

example7.title=AND Logic
example7.description=If you have multiple rules configured for a filter then ALL of them must pass for the filter to pass. In this example only one of the rules is met so the Logo is not rendered because although 'x' equals 'a', 'y' does not equal 'c'.

example8.title=OR Logic
example8.description=This example is the same as the last except that we are using the 'renderFilterMethod' attribute to switch the logic applied to multiple rules in a filter from AND to OR. This means that only one rule needs to pass in order for the Logo to be rendered.

example9.title=Nesting Filters
example9.description=It is also possible to nest filters by placing them in a 'renderFilters' array (notice the additional 's'!). This allows much more complex rules to be constructed along the lines of... IF (a AND b) OR (c AND d).

example10.title=Alternative target
example10.description=It is possible to check other attributes than 'currentItem'. In this instance we are setting the 'target' attribute to test against properties configured in the 'alternative' object. Although 'currentItem' is the default, it is sometimes useful to be able to test other attributes of the widget. One useful example of this is testing group membership of the current user. This is covered in the tutorial on GitHub (see https://github.com/Alfresco/Aikau/blob/master/tutorial/chapters/Tutorial15.md)

example11.title=Client properties
example11.description=It is possible to test client-side properties. In this example we are testing to see whether or not the browser window is greater than 500 pixels (whether or not the Logo is displayed is dependant upon how you are viewing this page!). Notice that when comparing a client-side property you must use 'value' rather than 'values' (only a single value can be tested currently) and that you also have the option of setting a 'comparator'. If no 'comparator' is set then equality will be tested. The other comparator available currently is 'lessThan'.
