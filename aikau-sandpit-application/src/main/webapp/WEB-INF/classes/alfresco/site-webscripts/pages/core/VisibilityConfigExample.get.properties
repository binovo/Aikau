page.title=Visibility Config
page.description=Visibility configuration was initially implemented for form controls where visibility was controlled by the changing value of the other fields in a form. Later an alternative implementation was added for all widgets that did not maintain a record of changing state. As of version 1.0.69 it is possible to use the 'form style' with state management for all widgets. This page shows some of the different ways in which dynamic visibility behaviour can be configured.

example1.title=Basic Form Configuration
example1.description=When configuring visibility for a control the idea is to configure rules based on the 'fieldId' of another control. In this example the 'fieldId' of the checkbox is configured as the 'targetId' of a visibility rule in the text box. The 'is' attribute is an array of values that satisfy the rule. In this case it is just the boolean value when the checkbox is toggled.

example2.title=Basic Widget Example
example2.description=When configuring visibility for a non-form control widget you should use the 'topic' rather than 'targetId' in the rule objects. It is also necessary to configure an 'attribute' that needs to be evaluated. In this case the topic 'SHOW' is published by both buttons with a payload containing the attribute 'displayed'. The difference is that the show button 'publishPayload' contains the value 'YES' that is matched by the rule configured for the Logo widget.

example3.title=Strict
example3.description=By default if a published payload does not match any of the rules then the widget will be hidden. However it is possible to subtely change this behaviour through the use of the 'strict' attribute. In this example 'strict' is configured to be false. This means that the widget will NOT be hidden when the Hide Logo button is clicked because the rule is not matched. Try reconfigured 'strict' to be true and update the preview to see the hide button working again.

example4.title=Invisibility Configuration
example4.description=The previous example does not immediately make sense by itself. However, it makes more sense when combined with 'invisibilityConfig'. Setting 'strict' to false allows you to explicitly define rules that must be positively matched to change the visibility state. In this example we're adding 'invisibilityConfig' to the previous example and you can see that the Hide Logo button is working again. The difference is that we are fully defining the behaviour - it means that a different topic can be used for making a widget invisible from the topic that makes it visibile.

example5.title=Using Current Item
example5.description=It is also possible to use the 'currentItem' attribute for evaluation. This would typically be used when defining a model that is rendered multiple times within a list, but in this example we are explicitly defining the 'currentItem' of the Logo widget. Using this allows us to match a published payload attribute against an attribute of the currentItem object. This makes it possible to map visibility changes to a specific instance in a list. In this example we are targeting the 'targetValue' attribute which is configured to "show". We are setting 'strict' to be false again and this time the buttons are publishing different topics.

example6.title=Recording Publication State
example6.description=It is also possible to use the form control style of visibility configuration with non forms controls through the use of the 'useState' attribute. This changes the behaviour so that each change in rule state is stored for later evaluation. This means that the published topic that triggers the evaluation is compared with all the topics previously published for the other rules. In this example it is necessary to click both buttons to reveal the Logo widget because the 'rulesMethod' is configured to be 'ALL'. By setting 'useState' to true we are able to record the state of each publication and only reveal the widget when all states match the rules. Notice by default the evaluated attribute is 'value' - but in the second rule we are using the custom attribute of 'show'